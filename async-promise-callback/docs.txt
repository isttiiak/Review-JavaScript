// In this chapter we will learn Asynchronous, promises, callback traits of JS.

* What is Synchronous in JS?
// Synchronous code is executed line by line, blocking the execution of subsequent code until the current operation completes.
// Example:
console.log("Start");
console.log("Middle");
console.log("End");
// Output:
// Start
// Middle
// End

* What is Asynchronous in JS?
// Asynchronous code allows operations to run in the background, enabling other code to execute without waiting for the operation to complete.
// Example:
console.log("Start");
setTimeout(() => {
  console.log("Middle");
}, 1000);
console.log("End");
// Output:
// Start
// End
// Middle (after 1 second)  

* What are Callbacks in JS?
// Callbacks are functions passed as arguments to other functions, which can be executed after a certain operation completes.
// Example:
function fetchData(callback) {
  setTimeout(() => {
    console.log("Data fetched");
    callback();
  }, 1000);
}       


fetchData(() => {
  console.log("Callback executed");
});
// Output:
// Data fetched (after 1 second)
// Callback executed    

* What are Promises in JS?
// Promises are objects representing the eventual completion (or failure) of an asynchronous operation, allowing chaining of operations.

// Promises provide a cleaner way to handle asynchronous operations compared to callbacks, avoiding callback hell and making the code more readable.

** There are three states of a promise:
// 1. Pending: The initial state, neither fulfilled nor rejected.
// 2. Fulfilled: The operation completed successfully.
// 3. Rejected: The operation failed.   




* What are Async/Await?
// Async/Await is a syntax for working with promises that allows writing asynchronous code in a more synchronous style.

// Async/Await makes the code cleaner and easier to read, especially when dealing with multiple asynchronous operations.
// It allows us to write asynchronous code that looks like synchronous code, making it easier to understand and maintain.


* What is Callback Hell?
// Callback Hell refers to the situation where multiple nested callbacks make the code difficult to read and maintain.
// It often occurs when dealing with multiple asynchronous operations that depend on each other.

