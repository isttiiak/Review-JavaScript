- DOM stands for Document Object Model.
- It represents the structure of an HTML or XML document as a tree of objects.
- Each element, attribute, and piece of text is a node in the DOM tree.
- JavaScript can access and modify the DOM to change the content, structure, and style of a webpage.
- Common DOM methods include getElementById, getElementsByClassName, querySelector, and querySelectorAll.
- DOM manipulation allows dynamic updates to web pages without reloading.
- Events (like clicks and key presses) can be handled using the DOM.
- The DOM is platform- and language-independent.
- Modern browsers provide developer tools to inspect and manipulate the DOM.

- window object is a browser object that created by the respective browser. Window Object is a global object with lots of properties and method like alert, console.log .....

- All HTML code can access by the JavaScript

- console.log --> print as an element 
- console.dir --> print  object

** Priority for JavaScript code is the js file instead of inline script.

** on fire an event the function that runs we call it Handler.

* Difference Between querySelector and querySelectorAll:

** querySelector() returns only the first matching element as a single Element object.

** querySelectorAll() returns all matching elements as a static NodeList that can be iterated over

* Comparison with Other DOM Selection Methods:

** Unlike getElementById(), which only selects elements by their unique ID, querySelector() accepts any CSS selector, making it more flexible. However, getElementById() is slightly faster for ID-based selection.

** Methods like getElementsByClassName() or getElementsByTagName() return live HTMLCollections, whereas querySelectorAll() returns a static NodeList


Dom manipulation:

* properties:
    tagName: returns the tag name of the element.
    innerText: returns the text content of the element.
    innerHTML: returns the HTML content of the element.
    className: returns the class name of the element.
    id: returns the id of the element.
    style: returns the inline style of the element.
    attributes: returns a NamedNodeMap of the element's attributes.
    value: returns the value of the element (for input elements).
- Methods:
    getElementById(id): returns the element with the specified id.
    getElementsByClassName(className): returns a live HTMLCollection of elements with the specified class name.
    getElementsByTagName(tagName): returns a live HTMLCollection of elements with the specified tag name.
    querySelector(selector): returns the first element that matches the specified CSS selector.
    querySelectorAll(selector): returns a static NodeList of elements that match the specified CSS selector.
    createElement(tagName): creates a new element with the specified tag name.
    createTextNode(text): creates a new text node with the specified text.
    appendChild(node): adds a node as the last child of the element.
    removeChild(node): removes a child node from the element.
    replaceChild(newNode, oldNode): replaces an old child node with a new node.
    setAttribute(name, value): sets the value of an attribute on the element.   


** Events:
    click: occurs when the element is clicked.
    mouseover: occurs when the mouse pointer is moved over the element.
    keydown: occurs when a key is pressed down while the element is focused.
    keyup: occurs when a key is released while the element is focused.
    focus: occurs when the element gains focus.
    blur: occurs when the element loses focus.  
    change: occurs when the value of the element changes.
    submit: occurs when a form is submitted.
    load: occurs when the element is loaded.
- Event listeners can be added to elements to respond to user interactions.

* Event Object:
It is a special object that has details about the event.
All event handlers have access to the event Objects properties and method.

like, where the event were occurred, what is the type of the event, 

* Event listeners

we can handle Event by,
    >> inline handling (inside the tag we used the code like an attribute)
        - for multiline the code becomes bulky.
    >> In JS script file through a function we handled Event (node.event => {}) 
        - We can write one function to implement one event 
    
        >> Event listeners
            -- Always wait for Event and when it got an Event start action
            -- we can write multiple Event listeners for one Event
